Voici un exemple de **moteur de data quality en Python**, con√ßu pour analyser la qualit√© des donn√©es selon les crit√®res courants : **fra√Æcheur**, **pr√©sence** (donn√©es manquantes), et **coh√©rence**. Cet exemple est simple mais extensible pour s'adapter √† des besoins sp√©cifiques.

---

### **Exemple de Moteur de Data Quality**

#### √âtape 1 : Importation des biblioth√®ques
```python
import pandas as pd
import numpy as np
from datetime import datetime
import re
```

#### √âtape 2 : Charger les donn√©es
```python
def load_data(file_path):
    """
    Charge un fichier CSV ou Excel dans un DataFrame Pandas.
    """
    if file_path.endswith('.csv'):
        return pd.read_csv(file_path)
    elif file_path.endswith('.xls') or file_path.endswith('.xlsx'):
        return pd.read_excel(file_path)
    else:
        raise ValueError("Format de fichier non pris en charge.")
```

---

#### √âtape 3 : Analyse de la fra√Æcheur
```python
def check_freshness(df, date_column, threshold_years=2):
    """
    V√©rifie si les donn√©es sont obsol√®tes en fonction d'un seuil d'ann√©es.
    """
    today = datetime.today()
    df[date_column] = pd.to_datetime(df[date_column], errors='coerce')  # Conversion en format datetime
    df['Obsolete'] = (today - df[date_column]).dt.days > (threshold_years * 365)  # Condition d'obsolescence
    return df[['Obsolete', date_column]].value_counts()
```

---

#### √âtape 4 : Analyse des donn√©es manquantes
```python
def check_missing_data(df, required_columns):
    """
    V√©rifie la pr√©sence de valeurs manquantes dans les colonnes requises.
    """
    missing_report = {}
    for col in required_columns:
        missing_count = df[col].isnull().sum()
        missing_percentage = (missing_count / len(df)) * 100
        missing_report[col] = {"missing_count": missing_count, "missing_percentage": missing_percentage}
    return pd.DataFrame(missing_report).T  # Retourne un rapport des donn√©es manquantes
```

---

#### √âtape 5 : Validation de la coh√©rence
##### Validation des codes postaux :
```python
def validate_postal_code(df, postal_code_column, valid_length=5):
    """
    V√©rifie si les codes postaux respectent une longueur valide.
    """
    df['Invalid_Code'] = df[postal_code_column].apply(
        lambda x: len(str(x)) != valid_length if pd.notnull(x) else True
    )
    return df[df['Invalid_Code']]
```

##### Validation des num√©ros de t√©l√©phone :
```python
def validate_phone_number(df, phone_column):
    """
    V√©rifie si les num√©ros de t√©l√©phone respectent un format international.
    """
    phone_pattern = r'^\+?[1-9]\d{1,14}$'  # Format E.164
    df['Invalid_Phone'] = df[phone_column].apply(
        lambda x: not re.match(phone_pattern, str(x)) if pd.notnull(x) else True
    )
    return df[df['Invalid_Phone']]
```

---

#### √âtape 6 : Synth√®se des r√©sultats
```python
def generate_quality_report(df, date_column, required_columns, postal_code_column, phone_column):
    """
    G√©n√®re un rapport complet de la qualit√© des donn√©es.
    """
    print("=== Analyse de la fra√Æcheur ===")
    freshness_report = check_freshness(df, date_column)
    print(freshness_report)

    print("\n=== Analyse des donn√©es manquantes ===")
    missing_data_report = check_missing_data(df, required_columns)
    print(missing_data_report)

    print("\n=== Validation des codes postaux ===")
    postal_code_issues = validate_postal_code(df, postal_code_column)
    print(postal_code_issues)

    print("\n=== Validation des num√©ros de t√©l√©phone ===")
    phone_issues = validate_phone_number(df, phone_column)
    print(phone_issues)
```

---

#### √âtape 7 : Exemple d'utilisation
##### Fichier CSV fictif :
Imaginons un fichier `clients.csv` avec les colonnes suivantes :
- `last_update` : Date de la derni√®re mise √† jour
- `nom` : Nom du client
- `prenom` : Pr√©nom du client
- `adresse` : Adresse postale
- `code_postal` : Code postal
- `telephone` : Num√©ro de t√©l√©phone

##### Exemple :
```python
# Charger les donn√©es
file_path = "clients.csv"
df = load_data(file_path)

# Colonnes √† v√©rifier
date_column = "last_update"
required_columns = ["nom", "prenom", "adresse", "telephone"]
postal_code_column = "code_postal"
phone_column = "telephone"

# G√©n√©rer le rapport de qualit√©
generate_quality_report(df, date_column, required_columns, postal_code_column, phone_column)
```

---

### **R√©sultat attendu**
#### Rapport g√©n√©r√© dans la console :
```plaintext
=== Analyse de la fra√Æcheur ===
Obsolete  last_update
True      2020-01-01      15
False     2023-05-10      85

=== Analyse des donn√©es manquantes ===
              missing_count  missing_percentage
nom                      10                10.0
prenom                   5                  5.0
adresse                  15                15.0
telephone                2                  2.0

=== Validation des codes postaux ===
    temps   actif code_postal  Invalid_Code
15  2023    1000  AB123          True

=== Validation des num√©ros de t√©l√©phone ===
    temps   actif telephone Invalid_Phone
20  2023    1000   12345       True
```

---

### **Points forts de ce moteur :**
1. **Modularit√© :** Les fonctions sont ind√©pendantes, donc faciles √† √©tendre.
2. **Compatibilit√© :** Fonctionne avec CSV et Excel.
3. **Rapidit√© :** Exploite les capacit√©s de **Pandas** pour une analyse rapide.
4. **Extensibilit√© :** Vous pouvez ajouter d'autres crit√®res de qualit√© (par exemple, unicit√©, validit√© des emails).

---

Si vous souhaitez int√©grer ce moteur dans une application (comme Streamlit ou Dash), ou si vous avez des donn√©es sp√©cifiques, je peux vous aider √† adapter ce code‚ÄØ! üòä